/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Code Craft Eventos
 * API para cadastro de eventos
 * OpenAPI spec version: 1.0.0
 */
export interface UserEntity {
  id?: number;
  name?: string;
  email?: string;
}

export interface EventEntity {
  eventId?: number;
  title?: string;
  prettyName?: string;
  location?: string;
  price?: number;
  startDate?: string;
  enDate?: string;
  startTime?: string;
  endTime?: string;
}

export interface SubscriptionEntity {
  subscriptionNumber?: number;
  eventId?: EventEntity;
  subscribedUserId?: UserEntity;
  indicationUserId?: UserEntity;
}

export type ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesItemAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesItemDeclaredAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesItem = {
  name?: string;
  annotations?: ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesItemAnnotationsItem[];
  declaredAnnotations?: ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesItemDeclaredAnnotationsItem[];
  sealed?: boolean;
  specificationTitle?: string;
  specificationVersion?: string;
  specificationVendor?: string;
  implementationTitle?: string;
  implementationVersion?: string;
  implementationVendor?: string;
};

export type ApplicationContextClassLoaderParentUnnamedModuleClassLoader = {
  name?: string;
  registeredAsParallelCapable?: boolean;
  definedPackages?: ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesItem[];
  defaultAssertionStatus?: boolean;
};

export type ApplicationContextClassLoaderParentUnnamedModuleDescriptor = {
  open?: boolean;
  automatic?: boolean;
};

export type ApplicationContextClassLoaderParentUnnamedModuleAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentUnnamedModuleDeclaredAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentUnnamedModuleLayer = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentUnnamedModule = {
  name?: string;
  classLoader?: ApplicationContextClassLoaderParentUnnamedModuleClassLoader;
  descriptor?: ApplicationContextClassLoaderParentUnnamedModuleDescriptor;
  named?: boolean;
  annotations?: ApplicationContextClassLoaderParentUnnamedModuleAnnotationsItem[];
  declaredAnnotations?: ApplicationContextClassLoaderParentUnnamedModuleDeclaredAnnotationsItem[];
  packages?: string[];
  layer?: ApplicationContextClassLoaderParentUnnamedModuleLayer;
};

export type ApplicationContextClassLoaderParentDefinedPackagesItemAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentDefinedPackagesItemDeclaredAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderParentDefinedPackagesItem = {
  name?: string;
  annotations?: ApplicationContextClassLoaderParentDefinedPackagesItemAnnotationsItem[];
  declaredAnnotations?: ApplicationContextClassLoaderParentDefinedPackagesItemDeclaredAnnotationsItem[];
  sealed?: boolean;
  specificationTitle?: string;
  specificationVersion?: string;
  specificationVendor?: string;
  implementationTitle?: string;
  implementationVersion?: string;
  implementationVendor?: string;
};

export type ApplicationContextClassLoaderParent = {
  name?: string;
  registeredAsParallelCapable?: boolean;
  unnamedModule?: ApplicationContextClassLoaderParentUnnamedModule;
  definedPackages?: ApplicationContextClassLoaderParentDefinedPackagesItem[];
  defaultAssertionStatus?: boolean;
};

export type ApplicationContextClassLoaderUnnamedModuleClassLoaderDefinedPackagesItemAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderUnnamedModuleClassLoaderDefinedPackagesItemDeclaredAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderUnnamedModuleClassLoaderDefinedPackagesItem = {
  name?: string;
  annotations?: ApplicationContextClassLoaderUnnamedModuleClassLoaderDefinedPackagesItemAnnotationsItem[];
  declaredAnnotations?: ApplicationContextClassLoaderUnnamedModuleClassLoaderDefinedPackagesItemDeclaredAnnotationsItem[];
  sealed?: boolean;
  specificationTitle?: string;
  specificationVersion?: string;
  specificationVendor?: string;
  implementationTitle?: string;
  implementationVersion?: string;
  implementationVendor?: string;
};

export type ApplicationContextClassLoaderUnnamedModuleClassLoader = {
  name?: string;
  registeredAsParallelCapable?: boolean;
  definedPackages?: ApplicationContextClassLoaderUnnamedModuleClassLoaderDefinedPackagesItem[];
  defaultAssertionStatus?: boolean;
};

export type ApplicationContextClassLoaderUnnamedModuleDescriptor = {
  open?: boolean;
  automatic?: boolean;
};

export type ApplicationContextClassLoaderUnnamedModuleAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderUnnamedModuleDeclaredAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderUnnamedModuleLayer = { [key: string]: unknown };

export type ApplicationContextClassLoaderUnnamedModule = {
  name?: string;
  classLoader?: ApplicationContextClassLoaderUnnamedModuleClassLoader;
  descriptor?: ApplicationContextClassLoaderUnnamedModuleDescriptor;
  named?: boolean;
  annotations?: ApplicationContextClassLoaderUnnamedModuleAnnotationsItem[];
  declaredAnnotations?: ApplicationContextClassLoaderUnnamedModuleDeclaredAnnotationsItem[];
  packages?: string[];
  layer?: ApplicationContextClassLoaderUnnamedModuleLayer;
};

export type ApplicationContextClassLoaderDefinedPackagesItemAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderDefinedPackagesItemDeclaredAnnotationsItem = { [key: string]: unknown };

export type ApplicationContextClassLoaderDefinedPackagesItem = {
  name?: string;
  annotations?: ApplicationContextClassLoaderDefinedPackagesItemAnnotationsItem[];
  declaredAnnotations?: ApplicationContextClassLoaderDefinedPackagesItemDeclaredAnnotationsItem[];
  sealed?: boolean;
  specificationTitle?: string;
  specificationVersion?: string;
  specificationVendor?: string;
  implementationTitle?: string;
  implementationVersion?: string;
  implementationVendor?: string;
};

export type ApplicationContextClassLoader = {
  name?: string;
  registeredAsParallelCapable?: boolean;
  parent?: ApplicationContextClassLoaderParent;
  unnamedModule?: ApplicationContextClassLoaderUnnamedModule;
  definedPackages?: ApplicationContextClassLoaderDefinedPackagesItem[];
  defaultAssertionStatus?: boolean;
};

export interface ApplicationContext {
  parent?: ApplicationContext;
  id?: string;
  displayName?: string;
  applicationName?: string;
  startupDate?: number;
  autowireCapableBeanFactory?: AutowireCapableBeanFactory;
  environment?: Environment;
  beanDefinitionCount?: number;
  beanDefinitionNames?: string[];
  parentBeanFactory?: BeanFactory;
  classLoader?: ApplicationContextClassLoader;
}

export interface AutowireCapableBeanFactory { [key: string]: unknown }

export interface BeanFactory { [key: string]: unknown }

export type DefaultHttpStatusCode = HttpStatusCode;

export interface Environment {
  activeProfiles?: string[];
  defaultProfiles?: string[];
}

export type FilterRegistrationInitParameters = {[key: string]: string};

export interface FilterRegistration {
  servletNameMappings?: string[];
  urlPatternMappings?: string[];
  initParameters?: FilterRegistrationInitParameters;
  name?: string;
  className?: string;
}

export type HttpStatus = typeof HttpStatus[keyof typeof HttpStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HttpStatus = {
  '100_CONTINUE': '100 CONTINUE',
  '101_SWITCHING_PROTOCOLS': '101 SWITCHING_PROTOCOLS',
  '102_PROCESSING': '102 PROCESSING',
  '103_EARLY_HINTS': '103 EARLY_HINTS',
  '103_CHECKPOINT': '103 CHECKPOINT',
  '200_OK': '200 OK',
  '201_CREATED': '201 CREATED',
  '202_ACCEPTED': '202 ACCEPTED',
  '203_NON_AUTHORITATIVE_INFORMATION': '203 NON_AUTHORITATIVE_INFORMATION',
  '204_NO_CONTENT': '204 NO_CONTENT',
  '205_RESET_CONTENT': '205 RESET_CONTENT',
  '206_PARTIAL_CONTENT': '206 PARTIAL_CONTENT',
  '207_MULTI_STATUS': '207 MULTI_STATUS',
  '208_ALREADY_REPORTED': '208 ALREADY_REPORTED',
  '226_IM_USED': '226 IM_USED',
  '300_MULTIPLE_CHOICES': '300 MULTIPLE_CHOICES',
  '301_MOVED_PERMANENTLY': '301 MOVED_PERMANENTLY',
  '302_FOUND': '302 FOUND',
  '302_MOVED_TEMPORARILY': '302 MOVED_TEMPORARILY',
  '303_SEE_OTHER': '303 SEE_OTHER',
  '304_NOT_MODIFIED': '304 NOT_MODIFIED',
  '305_USE_PROXY': '305 USE_PROXY',
  '307_TEMPORARY_REDIRECT': '307 TEMPORARY_REDIRECT',
  '308_PERMANENT_REDIRECT': '308 PERMANENT_REDIRECT',
  '400_BAD_REQUEST': '400 BAD_REQUEST',
  '401_UNAUTHORIZED': '401 UNAUTHORIZED',
  '402_PAYMENT_REQUIRED': '402 PAYMENT_REQUIRED',
  '403_FORBIDDEN': '403 FORBIDDEN',
  '404_NOT_FOUND': '404 NOT_FOUND',
  '405_METHOD_NOT_ALLOWED': '405 METHOD_NOT_ALLOWED',
  '406_NOT_ACCEPTABLE': '406 NOT_ACCEPTABLE',
  '407_PROXY_AUTHENTICATION_REQUIRED': '407 PROXY_AUTHENTICATION_REQUIRED',
  '408_REQUEST_TIMEOUT': '408 REQUEST_TIMEOUT',
  '409_CONFLICT': '409 CONFLICT',
  '410_GONE': '410 GONE',
  '411_LENGTH_REQUIRED': '411 LENGTH_REQUIRED',
  '412_PRECONDITION_FAILED': '412 PRECONDITION_FAILED',
  '413_PAYLOAD_TOO_LARGE': '413 PAYLOAD_TOO_LARGE',
  '413_REQUEST_ENTITY_TOO_LARGE': '413 REQUEST_ENTITY_TOO_LARGE',
  '414_URI_TOO_LONG': '414 URI_TOO_LONG',
  '414_REQUEST_URI_TOO_LONG': '414 REQUEST_URI_TOO_LONG',
  '415_UNSUPPORTED_MEDIA_TYPE': '415 UNSUPPORTED_MEDIA_TYPE',
  '416_REQUESTED_RANGE_NOT_SATISFIABLE': '416 REQUESTED_RANGE_NOT_SATISFIABLE',
  '417_EXPECTATION_FAILED': '417 EXPECTATION_FAILED',
  '418_I_AM_A_TEAPOT': '418 I_AM_A_TEAPOT',
  '419_INSUFFICIENT_SPACE_ON_RESOURCE': '419 INSUFFICIENT_SPACE_ON_RESOURCE',
  '420_METHOD_FAILURE': '420 METHOD_FAILURE',
  '421_DESTINATION_LOCKED': '421 DESTINATION_LOCKED',
  '422_UNPROCESSABLE_ENTITY': '422 UNPROCESSABLE_ENTITY',
  '423_LOCKED': '423 LOCKED',
  '424_FAILED_DEPENDENCY': '424 FAILED_DEPENDENCY',
  '425_TOO_EARLY': '425 TOO_EARLY',
  '426_UPGRADE_REQUIRED': '426 UPGRADE_REQUIRED',
  '428_PRECONDITION_REQUIRED': '428 PRECONDITION_REQUIRED',
  '429_TOO_MANY_REQUESTS': '429 TOO_MANY_REQUESTS',
  '431_REQUEST_HEADER_FIELDS_TOO_LARGE': '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
  '451_UNAVAILABLE_FOR_LEGAL_REASONS': '451 UNAVAILABLE_FOR_LEGAL_REASONS',
  '500_INTERNAL_SERVER_ERROR': '500 INTERNAL_SERVER_ERROR',
  '501_NOT_IMPLEMENTED': '501 NOT_IMPLEMENTED',
  '502_BAD_GATEWAY': '502 BAD_GATEWAY',
  '503_SERVICE_UNAVAILABLE': '503 SERVICE_UNAVAILABLE',
  '504_GATEWAY_TIMEOUT': '504 GATEWAY_TIMEOUT',
  '505_HTTP_VERSION_NOT_SUPPORTED': '505 HTTP_VERSION_NOT_SUPPORTED',
  '506_VARIANT_ALSO_NEGOTIATES': '506 VARIANT_ALSO_NEGOTIATES',
  '507_INSUFFICIENT_STORAGE': '507 INSUFFICIENT_STORAGE',
  '508_LOOP_DETECTED': '508 LOOP_DETECTED',
  '509_BANDWIDTH_LIMIT_EXCEEDED': '509 BANDWIDTH_LIMIT_EXCEEDED',
  '510_NOT_EXTENDED': '510 NOT_EXTENDED',
  '511_NETWORK_AUTHENTICATION_REQUIRED': '511 NETWORK_AUTHENTICATION_REQUIRED',
} as const;

export interface HttpStatusCode {
  is4xxClientError?: boolean;
  is5xxServerError?: boolean;
  is1xxInformational?: boolean;
  is2xxSuccessful?: boolean;
  is3xxRedirection?: boolean;
  error?: boolean;
}

export interface JspConfigDescriptor {
  taglibs?: TaglibDescriptor[];
  jspPropertyGroups?: JspPropertyGroupDescriptor[];
}

export interface JspPropertyGroupDescriptor {
  elIgnored?: string;
  errorOnELNotFound?: string;
  pageEncoding?: string;
  scriptingInvalid?: string;
  isXml?: string;
  includePreludes?: string[];
  includeCodas?: string[];
  deferredSyntaxAllowedAsLiteral?: string;
  trimDirectiveWhitespaces?: string;
  errorOnUndeclaredNamespace?: string;
  defaultContentType?: string;
  urlPatterns?: string[];
  buffer?: string;
}

export type RedirectViewStaticAttributes = {[key: string]: { [key: string]: unknown }};

export type RedirectViewStatusCode = DefaultHttpStatusCode | HttpStatus;

export type RedirectViewAttributesMap = {[key: string]: { [key: string]: unknown }};

export type RedirectViewAttributes = {[key: string]: string};

export interface RedirectView {
  applicationContext?: ApplicationContext;
  servletContext?: ServletContext;
  contentType?: string;
  requestContextAttribute?: string;
  staticAttributes?: RedirectViewStaticAttributes;
  exposePathVariables?: boolean;
  exposeContextBeansAsAttributes?: boolean;
  exposedContextBeanNames?: string[];
  beanName?: string;
  url?: string;
  contextRelative?: boolean;
  http10Compatible?: boolean;
  exposeModelAttributes?: boolean;
  encodingScheme?: string;
  statusCode?: RedirectViewStatusCode;
  expandUriTemplateVariables?: boolean;
  propagateQueryParams?: boolean;
  hosts?: string[];
  redirectView?: boolean;
  propagateQueryProperties?: boolean;
  attributesMap?: RedirectViewAttributesMap;
  attributesCSV?: string;
  attributes?: RedirectViewAttributes;
}

export type ServletContextInitParameterNames = { [key: string]: unknown };

export type ServletContextServletRegistrations = {[key: string]: ServletRegistration};

export type ServletContextFilterRegistrations = {[key: string]: FilterRegistration};

export type ServletContextSessionTrackingModesItem = typeof ServletContextSessionTrackingModesItem[keyof typeof ServletContextSessionTrackingModesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServletContextSessionTrackingModesItem = {
  COOKIE: 'COOKIE',
  URL: 'URL',
  SSL: 'SSL',
} as const;

export type ServletContextDefaultSessionTrackingModesItem = typeof ServletContextDefaultSessionTrackingModesItem[keyof typeof ServletContextDefaultSessionTrackingModesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServletContextDefaultSessionTrackingModesItem = {
  COOKIE: 'COOKIE',
  URL: 'URL',
  SSL: 'SSL',
} as const;

export type ServletContextEffectiveSessionTrackingModesItem = typeof ServletContextEffectiveSessionTrackingModesItem[keyof typeof ServletContextEffectiveSessionTrackingModesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServletContextEffectiveSessionTrackingModesItem = {
  COOKIE: 'COOKIE',
  URL: 'URL',
  SSL: 'SSL',
} as const;

export type ServletContextClassLoaderDefinedPackagesItemAnnotationsItem = { [key: string]: unknown };

export type ServletContextClassLoaderDefinedPackagesItemDeclaredAnnotationsItem = { [key: string]: unknown };

export type ServletContextClassLoaderDefinedPackagesItem = {
  name?: string;
  annotations?: ServletContextClassLoaderDefinedPackagesItemAnnotationsItem[];
  declaredAnnotations?: ServletContextClassLoaderDefinedPackagesItemDeclaredAnnotationsItem[];
  sealed?: boolean;
  specificationTitle?: string;
  specificationVersion?: string;
  specificationVendor?: string;
  implementationTitle?: string;
  implementationVersion?: string;
  implementationVendor?: string;
};

export type ServletContextClassLoader = {
  name?: string;
  registeredAsParallelCapable?: boolean;
  definedPackages?: ServletContextClassLoaderDefinedPackagesItem[];
  defaultAssertionStatus?: boolean;
};

export type ServletContextAttributeNames = { [key: string]: unknown };

export interface ServletContext {
  initParameterNames?: ServletContextInitParameterNames;
  contextPath?: string;
  effectiveMajorVersion?: number;
  effectiveMinorVersion?: number;
  serverInfo?: string;
  servletContextName?: string;
  servletRegistrations?: ServletContextServletRegistrations;
  filterRegistrations?: ServletContextFilterRegistrations;
  sessionCookieConfig?: SessionCookieConfig;
  sessionTrackingModes?: ServletContextSessionTrackingModesItem[];
  defaultSessionTrackingModes?: ServletContextDefaultSessionTrackingModesItem[];
  effectiveSessionTrackingModes?: ServletContextEffectiveSessionTrackingModesItem[];
  jspConfigDescriptor?: JspConfigDescriptor;
  virtualServerName?: string;
  sessionTimeout?: number;
  requestCharacterEncoding?: string;
  responseCharacterEncoding?: string;
  classLoader?: ServletContextClassLoader;
  majorVersion?: number;
  minorVersion?: number;
  attributeNames?: ServletContextAttributeNames;
}

export type ServletRegistrationInitParameters = {[key: string]: string};

export interface ServletRegistration {
  mappings?: string[];
  runAsRole?: string;
  initParameters?: ServletRegistrationInitParameters;
  name?: string;
  className?: string;
}

export type SessionCookieConfigAttributes = {[key: string]: string};

export interface SessionCookieConfig {
  maxAge?: number;
  httpOnly?: boolean;
  path?: string;
  secure?: boolean;
  domain?: string;
  name?: string;
  attributes?: SessionCookieConfigAttributes;
  /** @deprecated */
  comment?: string;
}

export interface TaglibDescriptor {
  taglibURI?: string;
  taglibLocation?: string;
}

export type RegisterParams = {
subscription: SubscriptionEntity;
};

export type Register200 = { [key: string]: unknown };

export type Register1Params = {
subscription: SubscriptionEntity;
};

export type Register1200 = { [key: string]: unknown };

export type Create200 = { [key: string]: unknown };

export type GetRanking200RankingItem =
  {
    subscribers: number
    userId: number
    name: string
  }

export type GenerateRankingByEvent200 =
  {
    ranking: GetRanking200RankingItem[]
  }
export type GenerateRankingByEventByUser200 =
  {
    item: {
      subscribers: number
      userId: number
      name: string
    }
    position: number
  }

export type FindByEventPrettyName200 = { [key: string]: unknown };

export const getRegisterUrl = (prettyName: string,
    userId?: number,
   ) => {
  const normalizedParams =
    new URLSearchParams()

  return userId
    ? `http://localhost:8080/subscripition/${prettyName}/${userId}`
    : `http://localhost:8080/subscripition/${prettyName}`

}

export const registerToEvent =
  async (
    prettyName: string,
    userEntity: UserEntity,
    userId?: number,
    params?: RegisterParams,
    options?: RequestInit
  ): Promise<Register200> => {
    const res =
      await fetch(
        getRegisterUrl(
          prettyName,
          userId,
        ),
        {
          ...options,
          method:
            'POST',
          headers:
            {
              'Content-Type':
                'application/json',
              ...options?.headers,
            },
          body: JSON.stringify(
            userEntity
          ),
        }
      )

    const body =
      [
        204,
        205,
        304,
      ].includes(
        res.status
      )
        ? null
        : await res.text()
    const data: Register200 =
      body
        ? JSON.parse(
            body
          )
        : {}

    return data
  }

export const getRegister1Url = (prettyName: string,
    params: Register1Params,) => {
  const normalizedParams = new URLSearchParams();

  // biome-ignore lint/complexity/noForEach: <explanation>
  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8080/subscripition/${prettyName}?${stringifiedParams}` : `http://localhost:8080/subscripition/${prettyName}`
}

export const register1 = async (prettyName: string,
    userEntity: UserEntity,
    params: Register1Params, options?: RequestInit): Promise<Register1200> => {
  
  const res = await fetch(getRegister1Url(prettyName,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userEntity,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Register1200 = body ? JSON.parse(body) : {}

  return data
}



export const getFindAllEventsUrl = () => {

  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
    return `http://localhost:8080/events`
}

export const findAllEvents = async ( options?: RequestInit): Promise<EventEntity[]> => {
  
  const res = await fetch(getFindAllEventsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: EventEntity[] = body ? JSON.parse(body) : {}

  return data
}



export const getCreateUrl = () => {

  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
    return `http://localhost:8080/events`
}

export const create = async (eventEntity: EventEntity, options?: RequestInit): Promise<Create200> => {
  
  const res = await fetch(getCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      eventEntity,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Create200 = body ? JSON.parse(body) : {}

  return data
}



export const getAccessInviteLinkUrl = (subscribedId: number,) => {


  

  return `http://localhost:8080/subscripition/${subscribedId}`
}

export const accessInviteLink = async (subscribedId: number, options?: RequestInit): Promise<RedirectView> => {
  
  const res = await fetch(getAccessInviteLinkUrl(subscribedId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: RedirectView = body ? JSON.parse(body) : {}

  return data
}



export const getGenerateRankingByEventUrl = (prettyName: string,) => {

  return `http://localhost:8080/subscripition/${prettyName}/ranking`
}

export const generateRankingByEvent = async (prettyName: string, options?: RequestInit): Promise<GenerateRankingByEvent200> => {
  
  const res = await fetch(getGenerateRankingByEventUrl(prettyName),
  {      
    ...options,
    method: 'GET'
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GenerateRankingByEvent200 = body ? JSON.parse(body) : {}

  return data
}



export const getGenerateRankingByEventByUserUrl = (prettyName: string,
    userId: number,) => {

  return `http://localhost:8080/subscripition/${prettyName}/ranking/${userId}`
}

export const generateRankingByEventByUser = async (prettyName: string,
    userId: number, options?: RequestInit): Promise<GenerateRankingByEventByUser200> => {
  
  const res = await fetch(getGenerateRankingByEventByUserUrl(prettyName,userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GenerateRankingByEventByUser200 = body ? JSON.parse(body) : {}

  return data
}



export const getFindByEventPrettyNameUrl = (prettyName: string,) => {

  return `http://localhost:8080/events/${prettyName}`
}

export const findByEventPrettyName = async (prettyName: string, options?: RequestInit): Promise<FindByEventPrettyName200> => {
  
  const res = await fetch(getFindByEventPrettyNameUrl(prettyName),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FindByEventPrettyName200 = body ? JSON.parse(body) : {}

  return data
}
